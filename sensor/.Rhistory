# Step 2: 排序（以lastupdate为例）
sensor_time_sorted <- sensor_time %>%
arrange(lastupdate_time)
View(sensor_time_sorted)
library(lubridate)
library(dplyr)
sensor <- read.csv("on-street-parking-bay-sensors.csv")
bay <- read.csv("on-street-parking-bays.csv")
street <- read.csv("parking-zones-linked-to-street-segments.csv")
sensor_time <- data.frame(
KerbsideIDr = c(sensor$KerbsideID),
lastupdate = c(sensor$Lastupdated),
statustimestamp = c(sensor$Status_Timestamp)
)
# Step 1: 转换为POSIXct格式
sensor_time <- sensor_time %>%
mutate(
KerbsideID = KerbsideID,
lastupdate_time = ymd_hms(lastupdate, tz = "Australia/Melbourne"),
status_time = ymd_hms(statustimestamp, tz = "Australia/Melbourne")
)
library(lubridate)
library(dplyr)
sensor <- read.csv("on-street-parking-bay-sensors.csv")
bay <- read.csv("on-street-parking-bays.csv")
street <- read.csv("parking-zones-linked-to-street-segments.csv")
sensor_time <- data.frame(
KerbsideID = c(sensor$KerbsideID),
lastupdate = c(sensor$Lastupdated),
statustimestamp = c(sensor$Status_Timestamp)
)
# Step 1: 转换为POSIXct格式
sensor_time <- sensor_time %>%
mutate(
KerbsideID = KerbsideID,
lastupdate_time = ymd_hms(lastupdate, tz = "Australia/Melbourne"),
status_time = ymd_hms(statustimestamp, tz = "Australia/Melbourne")
)
# Step 2: 排序（以lastupdate为例）
sensor_time_sorted <- sensor_time %>%
arrange(lastupdate_time)
View(sensor_time)
View(sensor_time_sorted)
View(sensor_time)
View(sensor_time_sorted)
# Step 2: 排序（以lastupdate为例）
sensor_time_sorted <- sensor_time %>%
arrange(lastupdate_time, decreasing = TRUE)
View(sensor_time_sorted)
# Step 2: 排序（以lastupdate为例）
sensor_time_sorted <- sensor_time %>%
arrange(desc(lastupdate_time))
View(sensor_time_sorted)
View(sensor)
View(sensor_time)
View(sensor_time_sorted)
n_distinct(sensor$KerbsideID) == nrow(sensor)
View(sensor_time_sorted)
library(lubridate)
library(dplyr)
sensor <- read.csv("on-street-parking-bay-sensors.csv")
bay <- read.csv("on-street-parking-bays.csv")
street <- read.csv("parking-zones-linked-to-street-segments.csv")
sensor_time <- data.frame(
KerbsideID = c(sensor$KerbsideID),
lastupdate = c(sensor$Lastupdated),
statustimestamp = c(sensor$Status_Timestamp)
)
# change date format
sensor_time <- sensor_time %>%
mutate(
KerbsideID = KerbsideID,
lastupdate_time = ymd_hms(lastupdate, tz = "Australia/Melbourne"),
status_time = ymd_hms(statustimestamp, tz = "Australia/Melbourne")
)
sensor_time <- sensor_time %>%
mutate(
lastupdate_time = ymd_hms(lastupdate, tz = "Australia/Melbourne"),
status_time = ymd_hms(statustimestamp, tz = "Australia/Melbourne")
) %>%
arrange(desc(lastupdate_time)) %>%
mutate(
lastupdate_year = year(lastupdate_time),
lastupdate_month = month(lastupdate_time),
lastupdate_day = day(lastupdate_time),
lastupdate_hour = hour(lastupdate_time),
lastupdate_wday = wday(lastupdate_time, label = TRUE),
lastupdate_is_weekend = wday(lastupdate_time) %in% c(1,7)
)
View(sensor_time)
View(sensor)
sensor_time <- sensor_time %>%
mutate(
lastupdate_time = ymd_hms(lastupdate, tz = "Australia/Melbourne"),
status_time = ymd_hms(statustimestamp, tz = "Australia/Melbourne")
) %>%
arrange(desc(lastupdate_time)) %>%
mutate(
lastupdate_year = year(lastupdate_time),
lastupdate_month = month(lastupdate_time),
lastupdate_day = day(lastupdate_time),
lastupdate_hour = hour(lastupdate_time),
minute = minute(lastupdate_time),
second = second(lastupdate_time),
lastupdate_wday = wday(lastupdate_time, label = TRUE),
lastupdate_is_weekend = wday(lastupdate_time) %in% c(1,7)
)
View(sensor_time)
library(lubridate)
library(dplyr)
sensor <- read.csv("on-street-parking-bay-sensors.csv")
bay <- read.csv("on-street-parking-bays.csv")
street <- read.csv("parking-zones-linked-to-street-segments.csv")
sensor_time <- data.frame(
KerbsideID = c(sensor$KerbsideID),
lastupdate = c(sensor$Lastupdated),
statustimestamp = c(sensor$Status_Timestamp)
)
# change date format
sensor_time <- sensor_time %>%
mutate(
KerbsideID = KerbsideID,
lastupdate_time = ymd_hms(lastupdate, tz = "Australia/Melbourne"),
status_time = ymd_hms(statustimestamp, tz = "Australia/Melbourne")
)
sensor_time <- sensor_time %>%
mutate(
lastupdate_time = ymd_hms(lastupdate, tz = "Australia/Melbourne"),
status_time = ymd_hms(statustimestamp, tz = "Australia/Melbourne")
) %>%
arrange(desc(lastupdate_time)) %>%
mutate(
lastupdate_year = year(lastupdate_time),
lastupdate_month = month(lastupdate_time),
lastupdate_day = day(lastupdate_time),
lastupdate_hour = hour(lastupdate_time),
minute = minute(lastupdate_time),
second = second(lastupdate_time),
lastupdate_wday = wday(lastupdate_time, label = TRUE),
lastupdate_is_weekend = wday(lastupdate_time) %in% c(1,7)
)
View(sensor_time)
View(sensor)
sensor <- read.csv("on-street-parking-bay-sensors.csv")
bay <- read.csv("on-street-parking-bays.csv")
street <- read.csv("parking-zones-linked-to-street-segments.csv")
sensor$lastupdate <- NULL
sensor_time <- data.frame(
KerbsideID = c(sensor$KerbsideID),
statustimestamp = c(sensor$Status_Timestamp)
)
# change date format
sensor_time <- sensor_time %>%
mutate(
KerbsideID = KerbsideID,
status_time = ymd_hms(statustimestamp, tz = "Australia/Melbourne")
)
sensor_time <- sensor_time %>%
mutate(
status_time = ymd_hms(statustimestamp, tz = "Australia/Melbourne")
) %>%
arrange(desc(status_time)) %>%
mutate(
status_time_year = year(status_time),
status_time_month = month(status_time),
status_time_day = day(status_time),
status_time_hour = hour(status_time),
status_timeminute = minute(status_time),
status_timesecond = second(status_time),
status_time_wday = wday(status_time, label = TRUE),
status_time_is_weekend = wday(status_time) %in% c(1,7)
)
sensor <- read.csv("on-street-parking-bay-sensors.csv")
bay <- read.csv("on-street-parking-bays.csv")
street <- read.csv("parking-zones-linked-to-street-segments.csv")
View(sensor)
sensor$Lastupdated <- NULL
sensor_time <- data.frame(
KerbsideID = c(sensor$KerbsideID),
statustimestamp = c(sensor$Status_Timestamp)
)
View(sensor_time)
sensor_time <- sensor_time %>%
mutate(
status_time = ymd_hms(statustimestamp, tz = "Australia/Melbourne")
) %>%
arrange(desc(status_time)) %>%
mutate(
status_time_year = year(status_time),
status_time_month = month(status_time),
status_time_day = day(status_time),
status_time_hour = hour(status_time),
status_timeminute = minute(status_time),
status_timesecond = second(status_time),
status_time_wday = wday(status_time, label = TRUE),
status_time_is_weekend = wday(status_time) %in% c(1,7)
)
View(sensor_time)
sensor <- read.csv("on-street-parking-bay-sensors.csv")
bay <- read.csv("on-street-parking-bays.csv")
street <- read.csv("parking-zones-linked-to-street-segments.csv")
sensor$Lastupdated <- NULL
sensor_time <- sensor %>%
mutate(
status_time = ymd_hms(sensor$Status_Timestamp, tz = "Australia/Melbourne")
) %>%
arrange(desc(status_time)) %>%
mutate(
status_time_year = year(status_time),
status_time_month = month(status_time),
status_time_day = day(status_time),
status_time_hour = hour(status_time),
status_timeminute = minute(status_time),
status_timesecond = second(status_time),
status_time_wday = wday(status_time, label = TRUE),
status_time_is_weekend = wday(status_time) %in% c(1,7)
)
View(sensor_time)
sensor <- read.csv("on-street-parking-bay-sensors.csv")
bay <- read.csv("on-street-parking-bays.csv")
street <- read.csv("parking-zones-linked-to-street-segments.csv")
sensor$Lastupdated <- NULL
sensor_time <- sensor %>%
mutate(
status_time = ymd_hms(sensor$Status_Timestamp, tz = "Australia/Melbourne")
) %>%
arrange(desc(status_time)) %>%
mutate(
year = year(status_time),
month = month(status_time),
day = day(status_time),
hour = hour(status_time),
timeminute = minute(status_time),
second = second(status_time),
wday = wday(status_time, label = TRUE),
is_weekend = wday(status_time) %in% c(1,7)
)
sensor_time$Status_Timestamp <- NULL
View(sensor_time)
sensor_time$status_time <- NULL
View(sensor_time)
sensor_time <- sensor_time %>%
separate(location, into = c("latitude", "longitude"), sep = ", ", convert = TRUE)
library(tidyr)
sensor_time <- sensor_time %>%
separate(location, into = c("latitude", "longitude"), sep = ", ", convert = TRUE)
sensor_time <- sensor_time %>%
separate(Location, into = c("latitude", "longitude"), sep = ", ", convert = TRUE)
View(sensor_time)
View(street)
View(bay)
View(sensor_time)
View(bay)
View(bay)
View(street)
View(sensor)
View(street)
length(unique(street$ParkingZone))
View(bay)
length(unique(bay$RoadSegmentID))
length(unique(street$Segment_ID))
View(street)
View(bay)
View(sensor_time)
length(unique(sensor_time$Zone_Number))
unique(sensor$Zone_Number)
setdiff(unique(sensor_time$Zone_Number), unique(street$ParkingZone))
setdiff(unique(street$ParkingZone)), unique(sensor_time$Zone_Number)
setdiff(unique(street$ParkingZone)), unique(sensor_time$Zone_Number)
setdiff(unique(street$ParkingZone), unique(sensor_time$Zone_Number))
View(bay)
sensor_street <- sensor_time %>%
inner_join(street, by = c("Zone_number" = "ParkingZone"))
sensor_street <- sensor_time %>%
left_join(street, by = c("Zone_number" = "ParkingZone"))
library(lubridate)
library(dplyr)
library(tidyr)
library(lubridate)
library(dplyr)
library(tidyr)
sensor <- read.csv("on-street-parking-bay-sensors.csv")
bay <- read.csv("on-street-parking-bays.csv")
street <- read.csv("parking-zones-linked-to-street-segments.csv")
# clean sensor data
sensor$Lastupdated <- NULL
# change time format
sensor_time <- sensor %>%
mutate(
status_time = ymd_hms(sensor$Status_Timestamp, tz = "Australia/Melbourne")
) %>%
arrange(desc(status_time)) %>%
mutate(
year = year(status_time),
month = month(status_time),
day = day(status_time),
hour = hour(status_time),
timeminute = minute(status_time),
second = second(status_time),
wday = wday(status_time, label = TRUE),
is_weekend = wday(status_time) %in% c(1,7)
)
# useless column
sensor_time$Status_Timestamp <- NULL
sensor_time$status_time <- NULL
# seperate location
sensor_time <- sensor_time %>%
separate(Location, into = c("latitude", "longitude"), sep = ", ", convert = TRUE)
sensor_street <- sensor_time %>%
left_join(street, by = c("Zone_number" = "ParkingZone"))
sensor_street <- sensor_time %>%
left_join(street, by = c("Zone_Number" = "ParkingZone"))
View(sensor_street)
View(sensor_time)
View(bay)
sensor_bay <- sensor_time %>%
left_join(bay, by = c("KerbsideID" = "KerbsideID"))
sensor_bay <- sensor_time %>%
left_join(bay, by = c("int(KerbsideID)" = "int(KerbsideID)"))
sensor_time <- sensor_time %>%
mutate(KerbsideID = as.integer(KerbsideID))
bay <- bay %>%
mutate(KerbsideID = as.integer(KerbsideID))
sensor_time <- sensor_time %>%
mutate(KerbsideID = as.character(KerbsideID))
bay <- bay %>%
mutate(KerbsideID = as.character(KerbsideID))
sensor_bay <- sensor_time %>%
left_join(bay, by = "KerbsideID")
View(sensor_bay)
library(lubridate)
library(dplyr)
library(tidyr)
sensor <- read.csv("on-street-parking-bay-sensors.csv")
bay <- read.csv("on-street-parking-bays.csv")
street <- read.csv("parking-zones-linked-to-street-segments.csv")
# clean sensor data
sensor$Lastupdated <- NULL
# change time format
sensor_time <- sensor %>%
mutate(
status_time = ymd_hms(sensor$Status_Timestamp, tz = "Australia/Melbourne")
) %>%
arrange(desc(status_time)) %>%
mutate(
year = year(status_time),
month = month(status_time),
day = day(status_time),
hour = hour(status_time),
timeminute = minute(status_time),
second = second(status_time),
wday = wday(status_time, label = TRUE),
is_weekend = wday(status_time) %in% c(1,7)
)
# useless column
sensor_time$Status_Timestamp <- NULL
sensor_time$status_time <- NULL
# seperate location
sensor_time <- sensor_time %>%
separate(Location, into = c("latitude", "longitude"), sep = ", ", convert = TRUE)
# clean bay data
bay$Latitude <- NULL
bay$Longitude <- NULL
bay$Location <- NULL
bay$LastUpdated <- NULL
View(bay)
View(street)
bay_road <- bay %>%
extract(
col = RoadSegmentDescription,
into = c("OnStreet", "StreetFrom", "StreetTo"),
regex = "^(.*?) between (.*?) and (.*)$",
remove = FALSE
)
library(lubridate)
library(dplyr)
library(tidyr)
bay_road <- bay %>%
extract(
col = RoadSegmentDescription,
into = c("OnStreet", "StreetFrom", "StreetTo"),
regex = "^(.*?) between (.*?) and (.*)$",
remove = FALSE
)
View(bay_road)
View(sensor)
View(sensor_time)
View(sensor)
col(sensor_time)
View(sensor)
View(bay)
setdiff(unique(bay$RoadSegmentID), unique(street$Segment_ID))
setdiff(unique(street$Segment_ID), unique(bay$RoadSegmentID))
library(lubridate)
library(dplyr)
library(tidyr)
sensor <- read.csv("on-street-parking-bay-sensors.csv")
bay <- read.csv("on-street-parking-bays.csv")
street <- read.csv("parking-zones-linked-to-street-segments.csv")
# clean sensor data
sensor$Lastupdated <- NULL
# change time format
sensor_time <- sensor %>%
mutate(
status_time = ymd_hms(sensor$Status_Timestamp, tz = "Australia/Melbourne")
) %>%
arrange(desc(status_time)) %>%
mutate(
year = year(status_time),
month = month(status_time),
day = day(status_time),
hour = hour(status_time),
timeminute = minute(status_time),
second = second(status_time),
wday = wday(status_time, label = TRUE),
is_weekend = wday(status_time) %in% c(1,7)
)
# useless column
sensor_time$Status_Timestamp <- NULL
sensor_time$status_time <- NULL
# seperate location
sensor_time <- sensor_time %>%
separate(Location, into = c("latitude", "longitude"), sep = ", ", convert = TRUE)
# clean bay data
bay$Latitude <- NULL
bay$Longitude <- NULL
bay$Location <- NULL
bay$LastUpdated <- NULL
View(sensor_time)
sensor_time <- sensor_time %>%
mutate(KerbsideID = as.character(KerbsideID))
bay <- bay %>%
mutate(KerbsideID = as.character(KerbsideID))
sensor_bay <- sensor_time %>%
left_join(bay, by = "KerbsideID")
View(sensor_bay)
View(sensor)
sensor_bay_street <- sensor_bay %>%
left_join(street, c("RoadSegmentID" = c("Segment_ID")))
street %>%
group_by(Segment_ID) %>%
filter(n() > 1) %>%
arrange(Segment_ID)
sensor_bay_street <- sensor_bay %>%
left_join(street, by = c("Zone" = "Zone", "RoadSegmentID" = "Segment_ID"))
sensor_bay_street <- sensor_bay %>%
left_join(street, by = c("Zone_Number" = "ParkingZone", "RoadSegmentID" = "Segment_ID"))
View(sensor_bay_street)
View(sensor)
sum(apply(sensor_bay_street, 1, function(row) any(is.na(row))))
sensor_bay_street <- sensor_bay_street %>%
mutate(
OnStreet = if_else(is.na(OnStreet) | OnStreet == "",
NA_character_, OnStreet),
StreetFrom = if_else(is.na(StreetFrom) | StreetFrom == "",
NA_character_, StreetFrom),
StreetTo = if_else(is.na(StreetTo) | StreetTo == "",
NA_character_, StreetTo)
) %>%
extract(
col = "RoadDescription",
into = c("OnStreet_new", "StreetFrom_new", "StreetTo_new"),
regex = "^(.*?) between (.*?) and (.*)$",
remove = FALSE
) %>%
mutate(
OnStreet = if_else(is.na(OnStreet) | OnStreet == "", OnStreet_new, OnStreet),
StreetFrom = if_else(is.na(StreetFrom) | StreetFrom == "", StreetFrom_new, StreetFrom),
StreetTo = if_else(is.na(StreetTo) | StreetTo == "", StreetTo_new, StreetTo)
)
sensor_bay_street <- sensor_bay_street %>%
mutate(
OnStreet = if_else(is.na(OnStreet) | OnStreet == "",
NA_character_, OnStreet),
StreetFrom = if_else(is.na(StreetFrom) | StreetFrom == "",
NA_character_, StreetFrom),
StreetTo = if_else(is.na(StreetTo) | StreetTo == "",
NA_character_, StreetTo)
) %>%
extract(
col = "RoadSegmentDescription",
into = c("OnStreet_new", "StreetFrom_new", "StreetTo_new"),
regex = "^(.*?) between (.*?) and (.*)$",
remove = FALSE
) %>%
mutate(
OnStreet = if_else(is.na(OnStreet) | OnStreet == "", OnStreet_new, OnStreet),
StreetFrom = if_else(is.na(StreetFrom) | StreetFrom == "", StreetFrom_new, StreetFrom),
StreetTo = if_else(is.na(StreetTo) | StreetTo == "", StreetTo_new, StreetTo)
)
sensor_bay_street <- sensor_bay_street %>%
mutate(
OnStreet = if_else(is.na(OnStreet) | OnStreet == "",
NA_character_, OnStreet),
StreetFrom = if_else(is.na(StreetFrom) | StreetFrom == "",
NA_character_, StreetFrom),
StreetTo = if_else(is.na(StreetTo) | StreetTo == "",
NA_character_, StreetTo)
) %>%
extract(
col = "RoadSegmentDescription",
into = c("OnStreet_new", "StreetFrom_new", "StreetTo_new"),
regex = "^(.*?) between (.*?) and (.*)$",
remove = FALSE
) %>%
mutate(
OnStreet = if_else(is.na(OnStreet) | OnStreet == "", OnStreet_new, OnStreet),
StreetFrom = if_else(is.na(StreetFrom) | StreetFrom == "", StreetFrom_new, StreetFrom),
StreetTo = if_else(is.na(StreetTo) | StreetTo == "", StreetTo_new, StreetTo)
) %>%
select(-OnStreet_new, -StreetFrom_new, -StreetTo_new)
sum(is.na(sensor_bay_street$Zone_Number) | is.na(sensor_bay_street$RoadSegmentID))
