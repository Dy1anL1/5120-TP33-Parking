results <- merge(
test_features[, .(Zone_Number, year, month, day, hour, predicted_occupancy)],
test_labels_zone[, .(Zone_Number, year, month, day, hour, occupancy_rate)],
by = c("Zone_Number", "year", "month", "day", "hour")
)
mse_val <- mse(results$occupancy_rate, results$predicted_occupancy)
rmse_val <- rmse(results$occupancy_rate, results$predicted_occupancy)
mae_val <- mae(results$occupancy_rate, results$predicted_occupancy)
cat(sprintf("MSE: %.4f\nRMSE: %.4f\nMAE: %.4f\n", mse_val, rmse_val, mae_val))
library(data.table)
library(dplyr)
library(xgboost)
library(Metrics)
train <- fread("parking_train.csv")
test <- fread("parking_test.csv")
test_labels <- fread("parking_results_for_comparison.csv")
train_zone <- train %>%
group_by(Zone_Number, year, month, day, hour) %>%
summarise(
total_bays = n(),
occupied = sum(status == 1),
occupancy_rate = occupied / total_bays,
.groups = 'drop'
) %>%
arrange(Zone_Number, year, month, day, hour) %>%
as.data.table()
train_zone[, `:=`(
lag1 = shift(occupancy_rate, 1),
lag2 = shift(occupancy_rate, 2),
lag3 = shift(occupancy_rate, 3)
), by = Zone_Number]
train_zone[, target := shift(occupancy_rate, type = "lead"), by = Zone_Number]
train_zone <- train_zone[!is.na(lag3) & !is.na(target)]
features <- c("lag1", "lag2", "lag3", "year", "month", "day", "hour", "total_bays")
dtrain <- xgb.DMatrix(data = as.matrix(train_zone[, ..features]), label = train_zone$target)
params <- list(
objective = "reg:squarederror",
eta = 0.1,
max_depth = 8,
subsample = 0.8,
colsample_bytree = 0.8
)
model <- xgb.train(params = params, data = dtrain, nrounds = 100)
test_zone <- test %>%
group_by(Zone_Number, year, month, day, hour) %>%
summarise(total_bays = n(), .groups = 'drop') %>%
arrange(Zone_Number, year, month, day, hour) %>%
as.data.table()
full_data <- rbindlist(list(
train_zone[, .(Zone_Number, year, month, day, hour, occupancy_rate)],
test_zone[, .(Zone_Number, year, month, day, hour, occupancy_rate = NA_real_)]
), use.names = TRUE, fill = TRUE)
setorder(full_data, Zone_Number, year, month, day, hour)
full_data[, `:=`(
lag1 = shift(occupancy_rate, 1),
lag2 = shift(occupancy_rate, 2),
lag3 = shift(occupancy_rate, 3)
), by = Zone_Number]
test_features <- full_data[is.na(occupancy_rate) & !is.na(lag3)]
test_features <- merge(test_features, test_zone[, .(Zone_Number, year, month, day, hour, total_bays)],
by = c("Zone_Number", "year", "month", "day", "hour"))
dtest <- xgb.DMatrix(data = as.matrix(test_features[, .(lag1, lag2, lag3, year, month, day, hour, total_bays)]))
test_features[, predicted_occupancy := predict(model, dtest)]
test_labels_zone <- test_labels %>%
group_by(Zone_Number, year, month, day, hour) %>%
summarise(
total_bays = n(),
occupied = sum(status == 1),
occupancy_rate = occupied / total_bays,
.groups = 'drop'
) %>%
arrange(Zone_Number, year, month, day, hour) %>%
as.data.table()
results <- merge(
test_features[, .(Zone_Number, year, month, day, hour, predicted_occupancy)],
test_labels_zone[, .(Zone_Number, year, month, day, hour, occupancy_rate)],
by = c("Zone_Number", "year", "month", "day", "hour")
)
mse_val <- mse(results$occupancy_rate, results$predicted_occupancy)
rmse_val <- rmse(results$occupancy_rate, results$predicted_occupancy)
mae_val <- mae(results$occupancy_rate, results$predicted_occupancy)
cat(sprintf("MSE: %.4f\nRMSE: %.4f\nMAE: %.4f\n", mse_val, rmse_val, mae_val))
library(data.table)
library(dplyr)
library(xgboost)
library(Metrics)
train <- fread("parking_train.csv")
test <- fread("parking_test.csv")
test_labels <- fread("parking_results_for_comparison.csv")
train_zone <- train %>%
group_by(Zone_Number, year, month, day, hour) %>%
summarise(
total_bays = n(),
occupied = sum(status == 1),
occupancy_rate = occupied / total_bays,
.groups = 'drop'
) %>%
arrange(Zone_Number, year, month, day, hour) %>%
as.data.table()
train_zone[, `:=`(
lag1 = shift(occupancy_rate, 1),
lag2 = shift(occupancy_rate, 2),
lag3 = shift(occupancy_rate, 3)
), by = Zone_Number]
train_zone[, target := shift(occupancy_rate, type = "lead"), by = Zone_Number]
train_zone <- train_zone[!is.na(lag3) & !is.na(target)]
features <- c("lag1", "lag2", "lag3", "year", "month", "day", "hour", "total_bays")
dtrain <- xgb.DMatrix(data = as.matrix(train_zone[, ..features]), label = train_zone$target)
set.seed(123)
params <- list(
objective = "reg:squarederror",
eta = 0.1,
max_depth = 8,
subsample = 0.8,
colsample_bytree = 0.8
)
model <- xgb.train(params = params, data = dtrain, nrounds = 100)
test_zone <- test %>%
group_by(Zone_Number, year, month, day, hour) %>%
summarise(total_bays = n(), .groups = 'drop') %>%
arrange(Zone_Number, year, month, day, hour) %>%
as.data.table()
full_data <- rbindlist(list(
train_zone[, .(Zone_Number, year, month, day, hour, occupancy_rate)],
test_zone[, .(Zone_Number, year, month, day, hour, occupancy_rate = NA_real_)]
), use.names = TRUE, fill = TRUE)
setorder(full_data, Zone_Number, year, month, day, hour)
full_data[, `:=`(
lag1 = shift(occupancy_rate, 1),
lag2 = shift(occupancy_rate, 2),
lag3 = shift(occupancy_rate, 3)
), by = Zone_Number]
test_features <- full_data[is.na(occupancy_rate) & !is.na(lag3)]
test_features <- merge(test_features, test_zone[, .(Zone_Number, year, month, day, hour, total_bays)],
by = c("Zone_Number", "year", "month", "day", "hour"))
dtest <- xgb.DMatrix(data = as.matrix(test_features[, .(lag1, lag2, lag3, year, month, day, hour, total_bays)]))
test_features[, predicted_occupancy := predict(model, dtest)]
test_labels_zone <- test_labels %>%
group_by(Zone_Number, year, month, day, hour) %>%
summarise(
total_bays = n(),
occupied = sum(status == 1),
occupancy_rate = occupied / total_bays,
.groups = 'drop'
) %>%
arrange(Zone_Number, year, month, day, hour) %>%
as.data.table()
results <- merge(
test_features[, .(Zone_Number, year, month, day, hour, predicted_occupancy)],
test_labels_zone[, .(Zone_Number, year, month, day, hour, occupancy_rate)],
by = c("Zone_Number", "year", "month", "day", "hour")
)
mse_val <- mse(results$occupancy_rate, results$predicted_occupancy)
rmse_val <- rmse(results$occupancy_rate, results$predicted_occupancy)
mae_val <- mae(results$occupancy_rate, results$predicted_occupancy)
cat(sprintf("MSE: %.4f\nRMSE: %.4f\nMAE: %.4f\n", mse_val, rmse_val, mae_val))
library(data.table)
library(dplyr)
library(xgboost)
library(Metrics)
train <- fread("parking_train.csv")
test <- fread("parking_test.csv")
test_labels <- fread("parking_results_for_comparison.csv")
train_zone <- train %>%
group_by(Zone_Number, year, month, day, hour) %>%
summarise(
total_bays = n(),
occupied = sum(status == 1),
occupancy_rate = occupied / total_bays,
.groups = 'drop'
) %>%
arrange(Zone_Number, year, month, day, hour) %>%
as.data.table()
train_zone[, `:=`(
lag1 = shift(occupancy_rate, 1),
lag2 = shift(occupancy_rate, 2),
lag3 = shift(occupancy_rate, 3)
), by = Zone_Number]
train_zone[, target := shift(occupancy_rate, type = "lead"), by = Zone_Number]
train_zone <- train_zone[!is.na(lag3) & !is.na(target)]
features <- c("lag1", "lag2", "lag3", "year", "month", "day", "hour", "total_bays")
dtrain <- xgb.DMatrix(data = as.matrix(train_zone[, ..features]), label = train_zone$target)
set.seed(111)
params <- list(
objective = "reg:squarederror",
eta = 0.1,
max_depth = 8,
subsample = 0.8,
colsample_bytree = 0.8
)
model <- xgb.train(params = params, data = dtrain, nrounds = 100)
test_zone <- test %>%
group_by(Zone_Number, year, month, day, hour) %>%
summarise(total_bays = n(), .groups = 'drop') %>%
arrange(Zone_Number, year, month, day, hour) %>%
as.data.table()
full_data <- rbindlist(list(
train_zone[, .(Zone_Number, year, month, day, hour, occupancy_rate)],
test_zone[, .(Zone_Number, year, month, day, hour, occupancy_rate = NA_real_)]
), use.names = TRUE, fill = TRUE)
setorder(full_data, Zone_Number, year, month, day, hour)
full_data[, `:=`(
lag1 = shift(occupancy_rate, 1),
lag2 = shift(occupancy_rate, 2),
lag3 = shift(occupancy_rate, 3)
), by = Zone_Number]
test_features <- full_data[is.na(occupancy_rate) & !is.na(lag3)]
test_features <- merge(test_features, test_zone[, .(Zone_Number, year, month, day, hour, total_bays)],
by = c("Zone_Number", "year", "month", "day", "hour"))
dtest <- xgb.DMatrix(data = as.matrix(test_features[, .(lag1, lag2, lag3, year, month, day, hour, total_bays)]))
test_features[, predicted_occupancy := predict(model, dtest)]
test_labels_zone <- test_labels %>%
group_by(Zone_Number, year, month, day, hour) %>%
summarise(
total_bays = n(),
occupied = sum(status == 1),
occupancy_rate = occupied / total_bays,
.groups = 'drop'
) %>%
arrange(Zone_Number, year, month, day, hour) %>%
as.data.table()
results <- merge(
test_features[, .(Zone_Number, year, month, day, hour, predicted_occupancy)],
test_labels_zone[, .(Zone_Number, year, month, day, hour, occupancy_rate)],
by = c("Zone_Number", "year", "month", "day", "hour")
)
mse_val <- mse(results$occupancy_rate, results$predicted_occupancy)
rmse_val <- rmse(results$occupancy_rate, results$predicted_occupancy)
mae_val <- mae(results$occupancy_rate, results$predicted_occupancy)
cat(sprintf("MSE: %.4f\nRMSE: %.4f\nMAE: %.4f\n", mse_val, rmse_val, mae_val))
library(data.table)
library(dplyr)
library(xgboost)
library(Metrics)
train <- fread("parking_train.csv")
test <- fread("parking_test.csv")
test_labels <- fread("parking_results_for_comparison.csv")
train_zone <- train %>%
group_by(Zone_Number, year, month, day, hour) %>%
summarise(
total_bays = n(),
occupied = sum(status == 1),
occupancy_rate = occupied / total_bays,
.groups = 'drop'
) %>%
arrange(Zone_Number, year, month, day, hour) %>%
as.data.table()
train_zone[, `:=`(
lag1 = shift(occupancy_rate, 1),
lag2 = shift(occupancy_rate, 2),
lag3 = shift(occupancy_rate, 3)
), by = Zone_Number]
train_zone[, target := shift(occupancy_rate, type = "lead"), by = Zone_Number]
train_zone <- train_zone[!is.na(lag3) & !is.na(target)]
features <- c("lag1", "lag2", "lag3", "year", "month", "day", "hour", "total_bays")
dtrain <- xgb.DMatrix(data = as.matrix(train_zone[, ..features]), label = train_zone$target)
set.seed(111)
params <- list(
objective = "reg:squarederror",
eta = 0.1,
max_depth = 8,
subsample = 0.8,
colsample_bytree = 0.8
)
model <- xgb.train(params = params, data = dtrain, nrounds = 100)
test_zone <- test %>%
group_by(Zone_Number, year, month, day, hour) %>%
summarise(total_bays = n(), .groups = 'drop') %>%
arrange(Zone_Number, year, month, day, hour) %>%
as.data.table()
full_data <- rbindlist(list(
train_zone[, .(Zone_Number, year, month, day, hour, occupancy_rate)],
test_zone[, .(Zone_Number, year, month, day, hour, occupancy_rate = NA_real_)]
), use.names = TRUE, fill = TRUE)
setorder(full_data, Zone_Number, year, month, day, hour)
full_data[, `:=`(
lag1 = shift(occupancy_rate, 1),
lag2 = shift(occupancy_rate, 2),
lag3 = shift(occupancy_rate, 3)
), by = Zone_Number]
test_features <- full_data[is.na(occupancy_rate) & !is.na(lag3)]
test_features <- merge(test_features, test_zone[, .(Zone_Number, year, month, day, hour, total_bays)],
by = c("Zone_Number", "year", "month", "day", "hour"))
dtest <- xgb.DMatrix(data = as.matrix(test_features[, .(lag1, lag2, lag3, year, month, day, hour, total_bays)]))
test_features[, predicted_occupancy := predict(model, dtest)]
test_labels_zone <- test_labels %>%
group_by(Zone_Number, year, month, day, hour) %>%
summarise(
total_bays = n(),
occupied = sum(status == 1),
occupancy_rate = occupied / total_bays,
.groups = 'drop'
) %>%
arrange(Zone_Number, year, month, day, hour) %>%
as.data.table()
results <- merge(
test_features[, .(Zone_Number, year, month, day, hour, predicted_occupancy)],
test_labels_zone[, .(Zone_Number, year, month, day, hour, occupancy_rate)],
by = c("Zone_Number", "year", "month", "day", "hour")
)
mse_val <- mse(results$occupancy_rate, results$predicted_occupancy)
rmse_val <- rmse(results$occupancy_rate, results$predicted_occupancy)
mae_val <- mae(results$occupancy_rate, results$predicted_occupancy)
cat(sprintf("MSE: %.4f\nRMSE: %.4f\nMAE: %.4f\n", mse_val, rmse_val, mae_val))
library(xgboost)
library(caret)
library(dplyr)
train <- read.csv("parking_train.csv")
test <- read.csv("parking_test.csv")
test_labels <- read.csv("parking_results_for_comparison.csv")
train$Status_Description <- NULL
train_numeric <- train %>%
select(-status) %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.factor), as.integer))
train_matrix <- as.matrix(train_numeric)
train_label <- train$status
test_numeric <- test %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.factor), as.integer))
test_matrix <- as.matrix(test_numeric)
# Change the data into the format required by xgboost
dtrain <- xgb.DMatrix(data = train_matrix, label = train_label)
dtest <- xgb.DMatrix(data = test_matrix)
set.seed(222)
fin.mod <- xgb.train(
data = dtrain,
params = list(
objective = "binary:logistic",
eta = 0.03,
max_depth = 6,
subsample = 0.8,
colsample_bytree = 0.8
),
nrounds = 100,
watchlist = list(train = dtrain),
verbose = 1
)
pred_prob <- predict(fin.mod, test_matrix)
pred_class <- ifelse(pred_prob > 0.5, 1, 0)
confusionMatrix(as.factor(pred_class), as.factor(test_labels$status))
library(xgboost)
library(caret)
library(dplyr)
train <- read.csv("parking_train.csv")
test <- read.csv("parking_test.csv")
test_labels <- read.csv("parking_results_for_comparison.csv")
train$Status_Description <- NULL
train_numeric <- train %>%
select(-status) %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.factor), as.integer))
train_matrix <- as.matrix(train_numeric)
train_label <- train$status
test_numeric <- test %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.factor), as.integer))
test_matrix <- as.matrix(test_numeric)
# Change the data into the format required by xgboost
dtrain <- xgb.DMatrix(data = train_matrix, label = train_label)
dtest <- xgb.DMatrix(data = test_matrix)
set.seed(222)
fin.mod <- xgb.train(
data = dtrain,
params = list(
objective = "binary:logistic",
eta = 0.03,
max_depth = 6,
subsample = 0.8,
colsample_bytree = 0.8
),
nrounds = 100,
watchlist = list(train = dtrain),
verbose = 1
)
xgb.save(fin.mod, "parking_model.xgb")
char_cols <- sapply(train, is.character)
factor_levels <- list()
for (col in names(train)[char_cols]) {
train[[col]] <- factor(train[[col]])
factor_levels[[col]] <- levels(train[[col]])
test[[col]] <- factor(test[[col]], levels = factor_levels[[col]])
}
saveRDS(factor_levels, "factor_levels.rds")
library(xgboost)
library(caret)
library(dplyr)
train <- read.csv("parking_train.csv")
test <- read.csv("parking_test.csv")
test_labels <- read.csv("parking_results_for_comparison.csv")
char_cols <- sapply(train, is.character)
factor_levels <- list()
for (col in names(train)[char_cols]) {
train[[col]] <- factor(train[[col]])
factor_levels[[col]] <- levels(train[[col]])
test[[col]] <- factor(test[[col]], levels = factor_levels[[col]])
}
for (col in names(train)[char_cols]) {
print(col)
print(table(test[[col]], useNA = "ifany"))
}
View(test)
library(xgboost)
library(caret)
library(dplyr)
# read data
train <- read.csv("parking_train.csv")
test <- read.csv("parking_test.csv")
test_labels <- read.csv("parking_results_for_comparison.csv")
train$Status_Description <- NULL
# Convert to factor, save levels, convert to integer
train_factors <- train %>%
select(-status) %>%
mutate(across(where(is.character), as.factor))
factor_levels <- list()
char_cols <- sapply(train_factors, is.factor)
for (col in names(train_factors)[char_cols]) {
factor_levels[[col]] <- levels(train_factors[[col]])
}
saveRDS(factor_levels, "factor_levels.rds")
train_numeric <- train_factors %>%
mutate(across(where(is.factor), as.integer))
train_matrix <- as.matrix(train_numeric)
train_label <- train$status
# Read levels, convert to factor, convert to integer
factor_levels <- readRDS("factor_levels.rds")
for (col in names(factor_levels)) {
if (col %in% names(test)) {
test[[col]] <- factor(test[[col]], levels = factor_levels[[col]])
}
}
test_numeric <- test %>%
mutate(across(where(is.factor), as.integer))
test_matrix <- as.matrix(test_numeric)
# convert to dmatrix
dtrain <- xgb.DMatrix(data = train_matrix, label = train_label)
dtest <- xgb.DMatrix(data = test_matrix)
# training model
set.seed(222)
fin.mod <- xgb.train(
data = dtrain,
params = list(
objective = "binary:logistic",
eta = 0.03,
max_depth = 6,
subsample = 0.8,
colsample_bytree = 0.8
),
nrounds = 100,
watchlist = list(train = dtrain),
verbose = 1
)
xgb.save(fin.mod, "parking_model.xgb")
# model accuracy evaluation
pred_prob <- predict(fin.mod, dtest)
pred_class <- ifelse(pred_prob > 0.5, 1, 0)
confusionMatrix(as.factor(pred_class), as.factor(test_labels$status))
library(xgboost)
library(caret)
library(dplyr)
# read data
train <- read.csv("parking_train.csv")
test <- read.csv("parking_test.csv")
test_labels <- read.csv("parking_results_for_comparison.csv")
train$Status_Description <- NULL
# Convert to factor, save levels, convert to integer
train_factors <- train %>%
select(-status) %>%
mutate(across(where(is.character), as.factor))
factor_levels <- list()
char_cols <- sapply(train_factors, is.factor)
for (col in names(train_factors)[char_cols]) {
factor_levels[[col]] <- levels(train_factors[[col]])
}
saveRDS(factor_levels, "factor_levels.rds")
train_numeric <- train_factors %>%
mutate(across(where(is.factor), as.integer))
train_matrix <- as.matrix(train_numeric)
train_label <- train$status
# Read levels, convert to factor, convert to integer
factor_levels <- readRDS("factor_levels.rds")
for (col in names(factor_levels)) {
if (col %in% names(test)) {
test[[col]] <- factor(test[[col]], levels = factor_levels[[col]])
}
}
test_numeric <- test %>%
mutate(across(where(is.factor), as.integer))
test_matrix <- as.matrix(test_numeric)
# convert to dmatrix
dtrain <- xgb.DMatrix(data = train_matrix, label = train_label)
dtest <- xgb.DMatrix(data = test_matrix)
# training model
set.seed(222)
fin.mod <- xgb.train(
data = dtrain,
params = list(
objective = "binary:logistic",
eta = 0.03,
max_depth = 6,
subsample = 0.8,
colsample_bytree = 0.8
),
nrounds = 100,
watchlist = list(train = dtrain),
verbose = 1
)
xgb.save(fin.mod, "parking_model.xgb")
# model accuracy evaluation
pred_prob <- predict(fin.mod, dtest)
pred_class <- ifelse(pred_prob > 0.5, 1, 0)
confusionMatrix(as.factor(pred_class), as.factor(test_labels$status))
